# If this is your first time writing a language grammar, check out:
#   - https://flight-manual.atom.io/hacking-atom/sections/creating-a-grammar/

scopeName: 'source.regent'
name: 'Regent'
type: 'tree-sitter'
parser: 'tree-sitter-regent'

fileTypes: ['rg']

comments:
  start: '-- '

scopes:
  # Regent
  'task > name': 'entity.name.function'
  'task_parameter > name': 'constant.variable'

  '''
    fspace > name,
    struct > name
  ''': 'entity.name.class'

  '''
    fspace_argument > name,
    fspace_field > name,
    struct_field > name
  ''': 'entity.name.variable'

  'var_statement > name': 'constant.variable'

  'region_field_identifier > identifier': 'constant.variable'

  'type_identifier': 'support.storage.type'
  'regent_primitive_type': 'support.storage.type'

  '''
    "task",
    "fspace",
    "struct",
    "region",
    "ispace",
    "ptr",
    "var",
    "where",
    "reads",
    "writes",
    "reduces",
    "exclusive",
    "atomic",
    "simultaneous",
    "relaxed",
  ''': 'keyword.control'
  '''
    "min",
    "max",
    "copy",
    "fill"
  ''': 'keyword.operators'
  '"wild"': 'constant.language'

  '":"': 'meta.delimiter'

  # Lua
  "comment": "comment"
  "string": "string"
  "number": "constant.numeric"

  '''
    function > function_name > identifier,
    function > function_name > property_identifier,
    function > function_name > method,
    local_function > identifier,
    function_call > identifier,
    function_call > property_identifier,
    function_call > method,
    next
  ''': "entity.name.function"

  '''
    parameters > identifier,
    spread
  ''': "variable.parameter"

  '''
    self,
    global_variable
  ''': "variable.language"

  "nil": "constant.language"
  "true": "constant.language.boolean"
  "false": "constant.language.boolean"

  "'local'": "storage.modifier"
  "'function'": "storage.type.function"
  "label_statement": "storage.type.label"

  "'{'": "punctuation.definition.table.begin.bracket.curly"
  "'}'": "punctuation.definition.table.end.bracket.curly"

  '''
    "do",
    "return",
    "if",
    "then",
    "elseif",
    "else",
    "while",
    "repeat",
    "until",
    "for",
    "in",
    "goto",
    "end"
  ''': "keyword.control"

  '''
    "or",
    "and",
    "not"
  ''': "keyword.operator.logical"

  '''
    "=",
    "<",
    "<=",
    "==",
    "~=",
    ">=",
    ">",
    "|",
    "~",
    "&",
    "<<",
    ">>",
    "+",
    "-",
    "*",
    "/",
    "//",
    "%",
    "..",
    "^",
    "#"
  ''': "keyword.operator"

  '''
    ".",
    ",",
    ";"
  ''': "meta.delimiter"

folds: [
  # Regent
  {
    type: 'task',
    start: {type: '")"'},
    end: {type: '"end"'}
  }

  {
    type: 'fspace',
    start: {type: '"{"'},
    end: {type: '"}"'}
  }

  # Lua
  {
    type: [
      "do_statement",
      "while_statement",
      "repeat_statement",
      "for_statement",
      "for_in_statement",
      "function",
      "local_function",
      "function_definition",
      "table"
    ],
    end: {index: -1}
  },
  {
    type: [
      "if_statement",
      "elseif"
    ],
    start: {index: 1},
    end: {type: ["else", "elseif"]}
  },
  {
    type: "if_statement",
    start: {index: 1},
    end: {index: -1}
  },
  {
    type: "elseif",
    start: {index: 1}
  },
  {
    type: "else",
    start: {index: 0}
  }
]
