# If this is your first time writing a language grammar, check out:
#   - https://flight-manual.atom.io/hacking-atom/sections/creating-a-grammar/

scopeName: 'source.regent'
name: 'Regent'
type: 'tree-sitter'
parser: 'tree-sitter-regent'

fileTypes: ['rg']

comments:
  start: '-- '

# TODO: Do keyword/entity.name.function stuff...
scopes:
  # Regent

  # task definition
  'task > task_name': 'entity.name.function'
  'task_parameter > task_parameter_name': 'constant.variable'
  '''
    task > "task",
    task > "where",
    task_privilege_declaration > "reads",
    task_privilege_declaration > "writes",
    task_privilege_declaration > "reduces",
    task_privilege_declaration > "+",
    task_privilege_declaration > "*",
    task_privilege_declaration > "-",
    task_privilege_declaration > "/",
    task_privilege_declaration > "min",
    task_privilege_declaration > "max",
    task_privilege_declaration > "exclusive",
    task_privilege_declaration > "atomic",
    task_privilege_declaration > "simultaneous",
    task_privilege_declaration > "relaxed",
    task > "do",
    task > "end"
  ''': 'keyword.control'
  '''
    task_constraints_declaration > "*",
    task_constraints_declaration > "<="
  ''': 'keyword.control' # TODO: Should be operator

  '''
    copy_statement > "copy",
    fill_statement > "fill"
  ''': 'keyword.control'

  # fspace definition
  'fspace > "fspace"': 'keyword.control'
  'fspace > fspace_name': 'entity.name.class'
  '''
    fspace > fspace_argument_name,
    fspace > fspace_field > fspace_field_name
  ''': 'entity.name.variable'

  'region_type > "region"': 'keyword.control'

  'region_identifier > wild': 'keyword.control'
  'region_identifier > identifier': 'constant.variable'

  'regent_index_space > "ispace"': 'keyword.control'

  'type_identifier': 'support.storage.type'
  'regent_primitive': 'support.storage.type'

  # Lua
  '''
    return_statement > "return",
    local_variable_declaration > "local",
    do_statement > "do",
    do_statement > "end",
    if_statement > "if",
    if_statement > "then",
    if_statement > "end",
    elseif_statement > "elseif",
    elseif_statement > "then",
    else_statement > "else",
    while_statement > "while",
    while_statement > "do",
    while_statement > "end",
    repeat_statement > "repeat",
    repeat_statement > "until",
    for_statement > "for",
    for_statement > "do",
    for_statement > "end",
    for_in_statement > "for",
    for_in_statement > "do",
    for_in_statement > "end",
    loop_expression > "in",
    goto_statement > "goto",
    break_statement > "break",
    spread,
    self,
    next
  ''': 'keyword.control'

  '''
    variable_declaration > "=",
    local_variable_declaration > "=",
    binary_operation > "or",
    binary_operation > "and",
    binary_operation > "<",
    binary_operation > "<=",
    binary_operation > "==",
    binary_operation > "~=",
    binary_operation > ">=",
    binary_operation > ">",
    binary_operation > "|",
    binary_operation > "~",
    binary_operation > "&",
    binary_operation > "<<",
    binary_operation > ">>",
    binary_operation > "+",
    binary_operation > "-",
    binary_operation > "*",
    binary_operation > "/",
    binary_operation > "//",
    binary_operation > "%",
    binary_operation > "..",
    binary_operation > "^",
    unary_operation > "not",
    unary_operation > "#",
    unary_operation > "-",
    unary_operation > "~"
  ''': 'keyword.control' # TODO: Should be operator

  'variable_declarator > identifier': 'entity.name.variable'

  '''
    function > "function",
    function > "end",
    local_function > "local",
    local_function > "function",
    local_function > "end"
  ''': 'keyword'
  'function > function_name > identifier': 'entity.name.function'
  'function > parameters > identifier': 'entity.name.function'

  'number': 'constant.numeric.decimal'
  'nil': 'constant.language.nil'
  'true': 'constant.language.boolean'
  'false': 'constant.language.boolean'

  'comment': 'comment'

folds: [
  {
    type: 'if_statement',
    start: {type: '"then"'},
    end: {type: ['"end"', 'elseif_statement', 'else_statement']}
  }

  {
    type: 'elseif_statement',
    start: {type: '"then"'},
    end: {index: -1} # TODO: Does not fold the last line
  }

  {
    type: 'else_statement',
    start: {type: '"else"'},
    end: {index: -1}
  }

  {
    type: 'repeat_statement',
    start: {type: '"repeat"'},
    end: {type: '"until"'}
  }

  {
    type: [
      'for_in_statement',
      'for_statement',
      'while_statement',
      'do_statement'
    ],
    start: {type: '"do"'},
    end: {type: '"end"'}
  }

  {
    type: 'task',
    start: {type: '")"'},
    end: {type: '"end"'}
  }

  {
    type: 'fspace',
    start: {type: '"{"'},
    end: {type: '"}"'}
  }
]
